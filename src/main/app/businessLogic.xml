<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" 
	xmlns:db="http://www.mulesoft.org/schema/mule/db" 
	xmlns:core="http://www.mulesoft.org/schema/mule/core" 
	xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" 
	xmlns="http://www.mulesoft.org/schema/mule/core" 
	xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" 
	xmlns:batch="http://www.mulesoft.org/schema/mule/batch"
	xmlns:sfdc="http://www.mulesoft.org/schema/mule/sfdc"
	xmlns:smtp="http://www.mulesoft.org/schema/mule/smtp"
	xmlns:json="http://www.mulesoft.org/schema/mule/json"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/batch http://www.mulesoft.org/schema/mule/batch/current/mule-batch.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/sfdc http://www.mulesoft.org/schema/mule/sfdc/current/mule-sfdc.xsd
http://www.mulesoft.org/schema/mule/smtp http://www.mulesoft.org/schema/mule/smtp/current/mule-smtp.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">

 <batch:job name="migrateAccountsBatch">
        <batch:threading-profile poolExhaustedAction="WAIT"/>
        <batch:input>
            <set-variable variableName="zip2accountRep" value="#[${zip2accountRep}]" doc:name="load zip2accountRep"/>

            <db:select config-ref="Database_A" doc:name="Select Accounts from Database A">
                <db:parameterized-query><![CDATA[SELECT * FROM Account ORDER BY last_update ASC]]></db:parameterized-query>

            </db:select>

        </batch:input> 
        <batch:process-records>
            <batch:step name="getAccountInBStep">
                <enricher source="#[payload.isEmpty() ? null : payload[0].Id]" target="#[payload.IdInB]" doc:name="Enrich payload with Id">
                    <db:select config-ref="Database_B" doc:name="Select Account from Database B">
                        <db:parameterized-query><![CDATA[SELECT Id FROM Account WHERE Name = #[payload['account_name']]]]></db:parameterized-query>
                    </db:select>


                </enricher>
            </batch:step>


            <batch:step name="updateAccountsInBStep" accept-expression="payload.IdInB != null">
                <batch:commit size="${page.size}" doc:name="Batch Commit">
                    <dw:transform-message doc:name="Transform Accounts A to Accounts B">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	Id                    : $.IdInB,
	AnnualRevenue         : $.annual_revenue,
	BillingCity           : $.billing_city,
	BillingCountry        : $.billing_country,
	BillingPostalCode     : $.billing_zipcode,
	BillingState          : $.billing_state,
	BillingStreet         : $.billing_street,
	Description           : $.description,
	Fax                   : $.fax_number,
	Industry              : $.industry,
	Name                  : $.account_name,
	NumberOfEmployees     : $.employee_count,
	Phone                 : $.phone_number,
	ShippingCity          : $.shipping_city,
	ShippingCountry       : $.shipping_country,
	ShippingPostalCode    : $.shipping_zipcode,
    ShippingState         : $.shipping_state,
	ShippingStreet        : $.shipping_street,
	Website               : $.web_address,
	AccountRepresentative : flowVars.zip2accountRep.'$($.billing_zipcode)'
}]]></dw:set-payload>
                    </dw:transform-message>



                    <db:update config-ref="Database_B" bulkMode="true" doc:name="Update Accounts in Database B">
                        <db:parameterized-query><![CDATA[UPDATE Account SET
	AnnualRevenue = #[payload['AnnualRevenue']],
	AccountRepresentative = #[payload['AccountRepresentative']],
	BillingCity = #[payload['BillingCity']],
	BillingCountry = #[payload['BillingCountry']],
	BillingPostalCode = #[payload['BillingPostalCode']],
	BillingState = #[payload['BillingState']],
	BillingStreet = #[payload['BillingStreet']],
	Description = #[payload['Description']],
	Fax = #[payload['Fax']],
	Industry = #[payload['Industry']],
	LastModifiedDate = CURRENT_TIMESTAMP(),
	LastModifiedById = CURRENT_USER(),
	NumberOfEmployees = #[payload['NumberOfEmployees']],
	Phone = #[payload['Phone']],
	ShippingCity = #[payload['ShippingCity']],
	ShippingCountry = #[payload['ShippingCountry']],
	ShippingPostalCode = #[payload['ShippingPostalCode']],
	ShippingState = #[payload['ShippingState']],
	ShippingStreet = #[payload['ShippingStreet']],
	Website = #[payload['Website']]
WHERE Id = #[payload['Id']]]]></db:parameterized-query>






                    </db:update>
                </batch:commit>
            </batch:step>
            <batch:step name="insertAccountsToBStep" accept-expression="payload.IdInB == null">
                <batch:commit size="${page.size}" doc:name="Batch Commit">

                    <dw:transform-message doc:name="Transform Accounts A to Accounts B">
                        <dw:set-payload><![CDATA[%dw 1.0
%output application/java
---
payload map {
	AnnualRevenue      : $.annual_revenue,
	BillingCity        : $.billing_city,
	BillingCountry     : $.billing_country,
	BillingPostalCode  : $.billing_zipcode,
	BillingState       : $.billing_state,
	BillingStreet      : $.billing_street,
	Description        : $.description,
	Fax                : $.fax_number,
	Industry           : $.industry,
	Name               : $.account_name,
	NumberOfEmployees  : $.employee_count,
	Phone              : $.phone_number,
	ShippingCity       : $.shipping_city,
	ShippingCountry    : $.shipping_country,
	ShippingPostalCode : $.shipping_zipcode,
    ShippingState      : $.shipping_state,
	ShippingStreet     : $.shipping_street,
	Website            : $.web_address,
	AccountRepresentative : flowVars.zip2accountRep.'$($.billing_zipcode)'
}]]></dw:set-payload>
                    </dw:transform-message>


                    <db:insert config-ref="Database_B" bulkMode="true" doc:name="Insert Accounts to Database B">
                        <db:parameterized-query><![CDATA[INSERT INTO Account (
	Id,
	AccountRepresentative,
	AnnualRevenue,
	BillingCity,
	BillingCountry,
	BillingPostalCode,
	BillingState,
	BillingStreet,
	Description,
	Fax,
	Industry,
	LastModifiedDate,
	LastModifiedById,
	Name,
	NumberOfEmployees,
	Phone,
	ShippingCity,
	ShippingCountry,
	ShippingPostalCode,
	ShippingState,
	ShippingStreet,
	Website
) VALUES (
	UUID(),
	#[payload['AccountRepresentative']],
	#[payload['AnnualRevenue']],
	#[payload['BillingCity']],
	#[payload['BillingCountry']],
	#[payload['BillingPostalCode']],
	#[payload['BillingState']],
	#[payload['BillingStreet']],
	#[payload['Description']],
	#[payload['Fax']],
	#[payload['Industry']],
	CURRENT_TIMESTAMP(),
	CURRENT_USER(),
	#[payload['Name']],
	#[payload['NumberOfEmployees']],
	#[payload['Phone']],
	#[payload['ShippingCity']],
	#[payload['ShippingCountry']],
	#[payload['ShippingPostalCode']],
	#[payload['ShippingState']],
	#[payload['ShippingStreet']],
	#[payload['Website']]
)]]></db:parameterized-query>


                    </db:insert>

                </batch:commit>
            </batch:step>
        </batch:process-records>
        <batch:on-complete>
			<scatter-gather doc:name="All">
                <processor-chain>
                    <json:object-to-json-transformer doc:name="Transform BatchJobInstance to JSON"/>
                    <logger message="Migration process has finished: #[payload]" level="INFO" doc:name="Log 'Migration process has finished'"/>
                </processor-chain>
                <processor-chain>
                    <parse-template location="email/body.html" doc:name="Parse Template"/>
                    <smtp:outbound-endpoint host="${smtp.host}" port="${smtp.port}" user="${smtp.user}" password="${smtp.password}" connector-ref="gmailConnector" to="${mail.to}" from="${mail.from}" subject="${mail.subject}" responseTimeout="10000" doc:name="Send mail"/>
                </processor-chain>
			</scatter-gather>
		</batch:on-complete>
    </batch:job>

    
</mule>
